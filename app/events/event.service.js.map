{"version":3,"sources":["events/event.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAQA;gBAII,sBAAoB,KAAW;oBAAX,UAAK,GAAL,KAAK,CAAM;oBAFvB,cAAS,GAAG,8BAA8B,CAAC;gBAInD,CAAC;gBAED,gCAAS,GAAT;oBACE,IAAI,SAAS,GAAyB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;yBAC/D,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAU,QAAQ,CAAC,IAAI,EAAE,EAAzB,CAAyB,CAAC;yBACtD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBACzB,MAAM,CAAC,SAAS,CAAC;gBACvB,CAAC;gBAED,+BAAQ,GAAR,UAAS,EAAO;oBACd,IAAI,WAAW,GAAyB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;yBACjE,GAAG,CAAC,UAAC,QAAiB,IAAK,OAAU,QAAQ,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,UAAC,QAAQ,IAAK,OAAA,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE,CAAC,EAArB,CAAqB,CAAC,EAArE,CAAqE,CAAC;yBACjG,EAAE,CAAC,UAAC,QAAQ,IAAK,OAAA,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAArB,CAAqB,CAAC;yBACvC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBACzB,MAAM,CAAC,WAAW,CAAC;gBACzB,CAAC;gBAEO,kCAAW,GAAnB,UAAoB,KAAe;oBACjC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACrB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,cAAc,CAAC,CAAC;gBAChE,CAAC;gBA3BL;oBAAC,iBAAU,EAAE;;gCAAA;gBA6Bb,mBAAC;YAAD,CA5BA,AA4BC,IAAA;YA5BD,uCA4BC,CAAA","file":"event.service.js","sourcesContent":["import { Injectable } from 'angular2/core';\nimport { IEvent } from './event';\nimport { Http, Response } from 'angular2/http';\nimport { Observable } from 'rxjs/Observable';\n\n\n\n@Injectable()\nexport class EventService {\n\n    private _eventUrl = 'http://angular.dev/data.json';\n\n    constructor(private _http: Http){\n\n    }\n\n    getEvents(): Observable<IEvent[]> {\n      let allEvents: Observable<IEvent[]> = this._http.get(this._eventUrl)\n          .map((response: Response) => <IEvent[]>response.json())\n          .catch(this.handleError);\n          return allEvents;\n    }\n\n    getEvent(id: any) {\n      let singleEvent: Observable<IEvent[]> = this._http.get(this._eventUrl)\n          .map((response:Response) => <IEvent[]>response.json().filter((response) => (response.code == id)))\n          .do((response) => console.log(response))\n          .catch(this.handleError);\n          return singleEvent;\n    }\n\n    private handleError(error: Response) {\n      console.error(error);\n      return Observable.throw(error.json().error || 'Server error');\n    }\n\n}\n"]}